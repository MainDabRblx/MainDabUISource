using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;


namespace MainDab.Classes.EasyExploitsAPI
{
	internal class DLLInjection
	{
		public DLLInjection()
		{
		}

		// Token: 0x02000004 RID: 4
		public enum DllInjectionResult
		{
			// Token: 0x04000003 RID: 3
			DllNotFound,
			// Token: 0x04000004 RID: 4
			GameProcessNotFound,
			// Token: 0x04000005 RID: 5
			InjectionFailed,
			// Token: 0x04000006 RID: 6
			Success
		}

		// Token: 0x02000005 RID: 5
		public sealed class DllInjector
		{
			// Token: 0x17000001 RID: 1
			// (get) Token: 0x0600000B RID: 11 RVA: 0x0000242F File Offset: 0x0000062F
			public static DllInjector GetInstance
			{
				get
				{
					if (DllInjector._instance == null)
					{
						DllInjector._instance = new DllInjector();
					}
					return DllInjector._instance;
				}
			}

			// Token: 0x0600000C RID: 12 RVA: 0x00002447 File Offset: 0x00000647
			static DllInjector()
			{
			}

			// Token: 0x0600000D RID: 13 RVA: 0x00002454 File Offset: 0x00000654
			private DllInjector()
			{
			}

			// Token: 0x0600000E RID: 14 RVA: 0x0000245C File Offset: 0x0000065C
			private bool bInject(uint pToBeInjected, string sDllPath)
			{
				global::System.IntPtr intPtr = DLLInjection.DllInjector.OpenProcess(0x43AU, 1, pToBeInjected);
				if (intPtr == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				global::System.IntPtr procAddress = DLLInjection.DllInjector.GetProcAddress(DLLInjection.DllInjector.GetModuleHandle("kernel32.dll"), "LoadLibraryA");
				if (procAddress == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				global::System.IntPtr intPtr2 = DLLInjection.DllInjector.VirtualAllocEx(intPtr, (global::System.IntPtr)0, (global::System.IntPtr)sDllPath.Length, 0x3000U, 0x40U);
				if (intPtr2 == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				byte[] bytes = global::System.Text.Encoding.ASCII.GetBytes(sDllPath);
				if (DLLInjection.DllInjector.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, 0) == 0)
				{
					return false;
				}
				if (DLLInjection.DllInjector.CreateRemoteThread(intPtr, (global::System.IntPtr)0, DLLInjection.DllInjector.INTPTR_ZERO, procAddress, intPtr2, 0U, (global::System.IntPtr)0) == DLLInjection.DllInjector.INTPTR_ZERO)
				{
					return false;
				}
				DLLInjection.DllInjector.CloseHandle(intPtr);
				return true;
			}

			// Token: 0x0600000F RID: 15
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern int CloseHandle(global::System.IntPtr hObject);

			// Token: 0x06000010 RID: 16
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern global::System.IntPtr CreateRemoteThread(global::System.IntPtr hProcess, global::System.IntPtr lpThreadAttribute, global::System.IntPtr dwStackSize, global::System.IntPtr lpStartAddress, global::System.IntPtr lpParameter, uint dwCreationFlags, global::System.IntPtr lpThreadId);

			// Token: 0x06000011 RID: 17
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern global::System.IntPtr GetModuleHandle(string lpModuleName);

			// Token: 0x06000012 RID: 18
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern global::System.IntPtr GetProcAddress(global::System.IntPtr hModule, string lpProcName);

			// Token: 0x06000013 RID: 19 RVA: 0x00002524 File Offset: 0x00000724
			public DLLInjection.DllInjectionResult Inject(string sProcName, string sDllPath)
			{
				if (!global::System.IO.File.Exists(sDllPath))
				{
					return DLLInjection.DllInjectionResult.DllNotFound;
				}
				uint num = 0U;
				global::System.Diagnostics.Process[] processes = global::System.Diagnostics.Process.GetProcesses();
				for (int i = 0; i < processes.Length; i++)
				{
					if (!(processes[i].ProcessName != sProcName))
					{
						num = (uint)processes[i].Id;
						break;
					}
				}
				if (num == 0U)
				{
					return DLLInjection.DllInjectionResult.GameProcessNotFound;
				}
				if (!this.bInject(num, sDllPath))
				{
					return DLLInjection.DllInjectionResult.InjectionFailed;
				}
				return DLLInjection.DllInjectionResult.Success;
			}

			// Token: 0x06000014 RID: 20
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern global::System.IntPtr OpenProcess(uint dwDesiredAccess, int bInheritHandle, uint dwProcessId);

			// Token: 0x06000015 RID: 21
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern global::System.IntPtr VirtualAllocEx(global::System.IntPtr hProcess, global::System.IntPtr lpAddress, global::System.IntPtr dwSize, uint flAllocationType, uint flProtect);

			// Token: 0x06000016 RID: 22
			[global::System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true)]
			private static extern int WriteProcessMemory(global::System.IntPtr hProcess, global::System.IntPtr lpBaseAddress, byte[] buffer, uint size, int lpNumberOfBytesWritten);

			// Token: 0x04000007 RID: 7
			private static readonly global::System.IntPtr INTPTR_ZERO = (global::System.IntPtr)0;

			// Token: 0x04000008 RID: 8
			private static DLLInjection.DllInjector _instance;
		}
	}
}
